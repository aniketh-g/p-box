//
// Generated by Bluespec Compiler, version 2024.01 (build ae2a2fc6)
//
// On Thu May 23 18:21:17 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTest(CLK,
	      RST_N);
  input  CLK;
  input  RST_N;

  // register p
  reg [63 : 0] p;
  wire [63 : 0] p$D_IN;
  wire p$EN;

  // register tbstate
  reg [1 : 0] tbstate;
  wire [1 : 0] tbstate$D_IN;
  wire tbstate$EN;

  // register usMult_p
  reg [63 : 0] usMult_p;
  wire [63 : 0] usMult_p$D_IN;
  wire usMult_p$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_idle,
       CAN_FIRE_RL_printans,
       CAN_FIRE_RL_usMult_compute,
       WILL_FIRE_RL_idle,
       WILL_FIRE_RL_printans,
       WILL_FIRE_RL_usMult_compute;

  // remaining internal signals
  wire [31 : 0] final_sum__h306;

  // rule RL_idle
  assign CAN_FIRE_RL_idle = tbstate == 2'd0 ;
  assign WILL_FIRE_RL_idle = CAN_FIRE_RL_idle ;

  // rule RL_printans
  assign CAN_FIRE_RL_printans = tbstate == 2'd2 ;
  assign WILL_FIRE_RL_printans = CAN_FIRE_RL_printans ;

  // rule RL_usMult_compute
  assign CAN_FIRE_RL_usMult_compute = 1'd1 ;
  assign WILL_FIRE_RL_usMult_compute = 1'd1 ;

  // register p
  assign p$D_IN = 64'h0 ;
  assign p$EN = 1'b0 ;

  // register tbstate
  assign tbstate$D_IN = 2'd2 ;
  assign tbstate$EN = CAN_FIRE_RL_idle ;

  // register usMult_p
  assign usMult_p$D_IN = { final_sum__h306, 32'b0 } ;
  assign usMult_p$EN = 1'd1 ;

  // remaining internal signals
  assign final_sum__h306 = 32'b0 + 32'b0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        p <= `BSV_ASSIGNMENT_DELAY 64'd0;
	tbstate <= `BSV_ASSIGNMENT_DELAY 2'd0;
	usMult_p <= `BSV_ASSIGNMENT_DELAY 64'd0;
      end
    else
      begin
        if (p$EN) p <= `BSV_ASSIGNMENT_DELAY p$D_IN;
	if (tbstate$EN) tbstate <= `BSV_ASSIGNMENT_DELAY tbstate$D_IN;
	if (usMult_p$EN) usMult_p <= `BSV_ASSIGNMENT_DELAY usMult_p$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    p = 64'hAAAAAAAAAAAAAAAA;
    tbstate = 2'h2;
    usMult_p = 64'hAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_printans)
	$display("ans = %b = %d = -%d",
		 usMult_p,
		 usMult_p,
		 ~usMult_p + 64'd1);
  end
  // synopsys translate_on
endmodule  // mkTest

