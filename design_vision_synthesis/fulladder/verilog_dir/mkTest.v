//
// Generated by Bluespec Compiler, version 2024.01 (build ae2a2fc6)
//
// On Fri May 24 04:54:16 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_start                      O     1 const
// result                         O     2 reg
// RDY_result                     O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// start__a                       I     1
// start__b                       I     1
// start__c                       I     1
// EN_start                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTest(CLK,
	      RST_N,

	      start__a,
	      start__b,
	      start__c,
	      EN_start,
	      RDY_start,

	      result,
	      RDY_result);
  input  CLK;
  input  RST_N;

  // action method start
  input  start__a;
  input  start__b;
  input  start__c;
  input  EN_start;
  output RDY_start;

  // value method result
  output [1 : 0] result;
  output RDY_result;

  // signals for module outputs
  wire [1 : 0] result;
  wire RDY_result, RDY_start;

  // register cout
  reg cout;
  wire cout$D_IN, cout$EN;

  // register s
  reg s;
  wire s$D_IN, s$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_compute,
       CAN_FIRE_start,
       WILL_FIRE_RL_compute,
       WILL_FIRE_start;

  // remaining internal signals
  wire x__h409, x__h496, x__h498, y__h497, y__h499;

  // action method start
  assign RDY_start = 1'd1 ;
  assign CAN_FIRE_start = 1'd1 ;
  assign WILL_FIRE_start = EN_start ;

  // value method result
  assign result = { s, cout } ;
  assign RDY_result = 1'd1 ;

  // rule RL_compute
  assign CAN_FIRE_RL_compute = EN_start ;
  assign WILL_FIRE_RL_compute = EN_start ;

  // register cout
  assign cout$D_IN = x__h496 | y__h497 ;
  assign cout$EN = EN_start ;

  // register s
  assign s$D_IN = x__h409 ^ start__c ;
  assign s$EN = EN_start ;

  // remaining internal signals
  assign x__h409 = start__a ^ start__b ;
  assign x__h496 = x__h498 | y__h499 ;
  assign x__h498 = start__a & start__b ;
  assign y__h497 = start__c & start__a ;
  assign y__h499 = start__b & start__c ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cout <= `BSV_ASSIGNMENT_DELAY 1'd0;
	s <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cout$EN) cout <= `BSV_ASSIGNMENT_DELAY cout$D_IN;
	if (s$EN) s <= `BSV_ASSIGNMENT_DELAY s$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cout = 1'h0;
    s = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkTest

